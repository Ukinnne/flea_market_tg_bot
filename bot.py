import os
import asyncio
import re
import json
from datetime import datetime
import random
from typing import Dict, List, Optional
from dataclasses import dataclass, asdict
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# ================== –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• –ò –•–†–ê–ù–ò–õ–ò–©–ï ==================

@dataclass
class Listing:
    id: str
    user_id: int
    title: str
    description: str
    photos: List[str]
    price: int
    created_at: str
    is_active: bool = True

@dataclass
class UserViewHistory:
    user_id: int
    viewed_ids: List[str]
    favorites: List[str]

class JSONStorage:
    def __init__(self, file_path: str = "flea_market_data.json"):
        self.file_path = file_path
        self.listings: Dict[str, Listing] = {}
        self.user_histories: Dict[int, UserViewHistory] = {}
        self.load_data()

    def load_data(self):
        try:
            with open(self.file_path, "r", encoding="utf-8") as f:
                data = json.load(f)
                self.listings = {k: Listing(**v) for k, v in data.get("listings", {}).items()}
                self.user_histories = {
                    int(k): UserViewHistory(
                        user_id=int(k),
                        viewed_ids=v.get("viewed_ids", []),
                        favorites=v.get("favorites", [])
                    )
                    for k, v in data.get("user_histories", {}).items()
                }
        except (FileNotFoundError, json.JSONDecodeError):
            self.listings = {}
            self.user_histories = {}

    def save_data(self):
        data = {
            "listings": {k: asdict(v) for k, v in self.listings.items()},
            "user_histories": {
                str(k): {
                    "viewed_ids": v.viewed_ids,
                    "favorites": v.favorites
                }
                for k, v in self.user_histories.items()
            }
        }
        with open(self.file_path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

    def get_user_history(self, user_id: int) -> UserViewHistory:
        if user_id not in self.user_histories:
            self.user_histories[user_id] = UserViewHistory(
                user_id=user_id,
                viewed_ids=[],
                favorites=[]
            )
        return self.user_histories[user_id]

    def add_listing(self, listing: Listing):
        self.listings[listing.id] = listing
        self.save_data()

    def get_listing(self, listing_id: str) -> Optional[Listing]:
        return self.listings.get(listing_id)

    def get_user_listings(self, user_id: int) -> List[Listing]:
        return [
            listing for listing in self.listings.values() 
            if listing.user_id == user_id and listing.is_active
        ]

    def get_active_listings(self, exclude_user_id: int) -> List[Listing]:
        return [
            listing for listing in self.listings.values()
            if listing.is_active and listing.user_id != exclude_user_id
        ]

    def mark_as_viewed(self, user_id: int, listing_id: str):
        history = self.get_user_history(user_id)
        if listing_id not in history.viewed_ids:
            history.viewed_ids.append(listing_id)
        self.save_data()

    def reset_viewed(self, user_id: int):
        history = self.get_user_history(user_id)
        history.viewed_ids = []
        self.save_data()

    def add_to_favorites(self, user_id: int, listing_id: str):
        history = self.get_user_history(user_id)
        if listing_id not in history.favorites:
            history.favorites.append(listing_id)
        self.save_data()

    def remove_from_favorites(self, user_id: int, listing_id: str):
        history = self.get_user_history(user_id)
        if listing_id in history.favorites:
            history.favorites.remove(listing_id)
        self.save_data()

    def get_favorites(self, user_id: int) -> List[Listing]:
        history = self.get_user_history(user_id)
        return [
            listing for listing_id in history.favorites
            if (listing := self.get_listing(listing_id)) is not None and listing.is_active
        ]

    def deactivate_listing(self, listing_id: str, user_id: int):
        listing = self.get_listing(listing_id)
        if listing and listing.user_id == user_id:
            listing.is_active = False
            self.save_data()
            return True
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
storage = JSONStorage()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
def generate_id() -> str:
    return datetime.now().strftime("%Y%m%d%H%M%S") + str(random.randint(1000, 9999))

# ================== –°–û–°–¢–û–Ø–ù–ò–Ø FSM ==================

class CreateForm(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_photos = State()
    waiting_for_price = State()
    confirmation = State()

preview_message_id = None

def is_next_command(text: str) -> bool:
    return re.fullmatch(r'–¥–∞–ª—å—à–µ|–¥–ø–ª—å—à–µ|–¥–∞–ª—à–µ|–¥–∞–ª–µ–µ|—Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', text.lower()) is not None

# ================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==================

@dp.message(Command("start"))
async def start(message: types.Message):
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"),
        types.KeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É"),
    )
    builder.row(
        types.KeyboardButton(text="üíº –ú–æ–∏ –∞–Ω–∫–µ—Ç—ã"),
        types.KeyboardButton(text="üïë –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫"),
    )
    builder.row(
        types.KeyboardButton(text="‚ô•Ô∏è –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã")
    )

    welcome_message = """
<b>üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FleaMarketBot!</b> üõçÔ∏èüí∞

–≠—Ç–æ —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è <b>–±—ã—Å—Ç—Ä—ã—Ö</b> –∏ <b>–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö</b> –ø–æ–∫—É–ø–æ–∫ –∏ –ø—Ä–æ–¥–∞–∂ –ø—Ä—è–º–æ –≤ Telegram!

‚ú® <b>–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?</b> ‚ú®
‚Ä¢ <b>–ü—Ä–æ–¥–∞–≤–∞—Ç—å –≤–µ—â–∏</b> ‚Äî –ª–µ–≥–∫–æ –∏ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏!
‚Ä¢ <b>–ù–∞—Ö–æ–¥–∏—Ç—å –≤—ã–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b> ‚Äî –≤—Å—ë –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ!
‚Ä¢ <b>–°–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ</b> ‚Äî —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–µ—Å—è!

üöÄ <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å?</b>
–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ –∏ —Å–ª–µ–¥—É–π –ø–æ–¥—Å–∫–∞–∑–∫–∞–º!

<b>–£–¥–∞—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫!</b> üí´
"""
    await message.answer(welcome_message, reply_markup=builder.as_markup(resize_keyboard=True))

@dp.message(Command("help"))
async def help_command(message: types.Message):
    help_text = """
üÜò <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b> üÜò

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É

<b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É?</b>
1. –ù–∞–∂–º–∏—Ç–µ "üìù –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É"
2. –°–ª–µ–¥—É–π—Ç–µ –ø–æ—à–∞–≥–æ–≤—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ

<b>–ö–∞–∫ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä?</b>
1. –ù–∞–π–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ "üîç –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"
2. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º
3. –î–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ–± —É—Å–ª–æ–≤–∏—è—Ö —Å–¥–µ–ª–∫–∏

<b>–í–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @Ukinnne
"""
    await message.answer(help_text)

# ================== –°–û–ó–î–ê–ù–ò–ï –ê–ù–ö–ï–¢–´ ==================

@dp.message(F.text == "üìù –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É")
async def handle_create(message: types.Message, state: FSMContext):
    await state.set_state(CreateForm.waiting_for_title)
    await message.answer("üõçÔ∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞–Ω–∫–µ—Ç—ã</b>\n\nüìõ <b>–®–∞–≥ 1 –∏–∑ 4</b>\n\n–ü—Ä–∏–¥—É–º–∞–π—Ç–µ <b>—è—Ä–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</b> –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:\n\n<code>–ü—Ä–∏–º–µ—Ä: \"–ö—Ä—É—Ç–æ–π –≤–µ–ª–æ—Å–∏–ø–µ–¥ GT Aggressor\"</code>")

@dp.message(CreateForm.waiting_for_title)
async def process_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(CreateForm.waiting_for_description)
    await message.answer("üìù <b>–®–∞–≥ 2 –∏–∑ 4</b>\n\n–ù–∞–ø–∏—à–∏—Ç–µ <b>–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b> –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:\n\n<code>–ü—Ä–∏–º–µ—Ä: \"–í–µ–ª–æ—Å–∏–ø–µ–¥ –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, 2021 –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞. –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∏–¥–µ–∞–ª—å–Ω–æ, –ø—Ä–æ–±–µ–≥ –º–µ–Ω–µ–µ 500 –∫–º.\"</code>")

@dp.message(CreateForm.waiting_for_description)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(CreateForm.waiting_for_photos)
    await message.answer("üì∏ <b>–®–∞–≥ 3 –∏–∑ 4</b>\n\n–ü—Ä–∏—à–ª–∏—Ç–µ <b>–¥–æ 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</b> –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ (—á–µ–º –±–æ–ª—å—à–µ, —Ç–µ–º –ª—É—á—à–µ!):\n\n–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <b>\"–î–∞–ª—å—à–µ\"</b> (–º–æ–∂–Ω–æ –≤ –ª—é–±–æ–º –Ω–∞–ø–∏—Å–∞–Ω–∏–∏), –µ—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ—Ç")

@dp.message(CreateForm.waiting_for_photos, F.text)
async def handle_text_during_photos(message: types.Message, state: FSMContext):
    if is_next_command(message.text):
        await state.set_state(CreateForm.waiting_for_price)
        await message.answer("üí∞ <b>–§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥!</b>\n\n–£–∫–∞–∂–∏—Ç–µ <b>—Ü–µ–Ω—É</b> –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):\n\n<code>–ü—Ä–∏–º–µ—Ä: 15000</code>")
    else:
        await message.answer("üì∏ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ —ç—Ç–∞–ø–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 3 —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <b>\"–î–∞–ª—å—à–µ\"</b> (–º–æ–∂–Ω–æ –≤ –ª—é–±–æ–º –Ω–∞–ø–∏—Å–∞–Ω–∏–∏), —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.")

@dp.message(CreateForm.waiting_for_photos, F.photo)
async def process_photos(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get('photos', [])
    
    if len(photos) < 3:
        photos.append(message.photo[-1].file_id)
        await state.update_data(photos=photos)
        
        if len(photos) < 3:
            await message.answer(f"üì∏ –§–æ—Ç–æ {len(photos)}/3 –ø–æ–ª—É—á–µ–Ω–æ!\n\n–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å <b>\"–î–∞–ª—å—à–µ\"</b> (–º–æ–∂–Ω–æ –≤ –ª—é–±–æ–º –Ω–∞–ø–∏—Å–∞–Ω–∏–∏)")
        else:
            await state.set_state(CreateForm.waiting_for_price)
            await message.answer("‚úÖ <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!</b>\n\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ <b>—Ü–µ–Ω—É</b> –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
    else:
        await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ (3). –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É–∫–∞–∑–∞–Ω–∏—é —Ü–µ–Ω—ã.")

@dp.message(CreateForm.waiting_for_price, F.text.regexp(r'^\d+$'))
async def process_price_valid(message: types.Message, state: FSMContext):
    try:
        price = int(message.text)
        if price > 2**63 - 1:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è SQLite INTEGER
            await message.answer("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Ü–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à—É—é —Å—É–º–º—É.")
            return
        await state.update_data(price=price)
        await state.set_state(CreateForm.confirmation)
        await show_preview(message, state)
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).")

@dp.message(CreateForm.waiting_for_price)
async def process_price_invalid(message: types.Message):
    await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏ (–±–µ–∑ –±—É–∫–≤, –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤).\n\n–ü—Ä–∏–º–µ—Ä: <code>15000</code>")

async def show_preview(message: types.Message, state: FSMContext):
    global preview_message_id
    data = await state.get_data()
    
    preview_text = (
        "üõí <b>–ü–†–ï–î–ü–†–û–°–ú–û–¢–† –ê–ù–ö–ï–¢–´</b> üõí\n\n"
        f"üè∑ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['title']}\n"
        f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n"
        f"üíµ <b>–¶–µ–Ω–∞:</b> {data['price']} —Ä—É–±.\n\n"
        "‚ú® <b>–í—Å—ë –≤—ã–≥–ª—è–¥–∏—Ç –æ—Ç–ª–∏—á–Ω–æ?</b> ‚ú®"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="‚úÖ –î–∞, –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å!", callback_data="confirm_yes"),
        types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no")
    )
    
    if data.get('photos'):
        media = []
        for i, photo_id in enumerate(data['photos']):
            media.append(types.InputMediaPhoto(
                media=photo_id,
                caption=preview_text if i == 0 else None
            ))
        
        await message.answer_media_group(media=media)
        msg = await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã:", reply_markup=builder.as_markup())
        preview_message_id = msg.message_id
    else:
        msg = await message.answer(preview_text, reply_markup=builder.as_markup())
        preview_message_id = msg.message_id

async def delete_preview_message(chat_id: int):
    global preview_message_id
    if preview_message_id:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=preview_message_id)
        except:
            pass
        preview_message_id = None

@dp.callback_query(CreateForm.confirmation, F.data == "confirm_yes")
async def confirm_yes(callback: types.CallbackQuery, state: FSMContext):
    await delete_preview_message(callback.message.chat.id)
    
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    new_listing = Listing(
        id=generate_id(),
        user_id=callback.from_user.id,
        title=data['title'],
        description=data['description'],
        photos=data.get('photos', []),
        price=data['price'],
        created_at=datetime.now().isoformat()
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    storage.add_listing(new_listing)
    
    success_message = """
üéâ <b>–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b> üéâ

–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–ø–µ—Ä—å –≤–∏–¥–Ω–æ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. 

<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>
‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∞–Ω–∫–µ—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ <b>"üíº –ú–æ–∏ –∞–Ω–∫–µ—Ç—ã"</b>
‚Ä¢ –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É —Ç–∞–º –∂–µ

–ñ–µ–ª–∞–µ–º –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–¥–∞–∂–∏! üí∞
"""
    await callback.message.answer(success_message)
    await state.clear()
    await callback.answer()

@dp.callback_query(CreateForm.confirmation, F.data == "confirm_no")
async def confirm_no(callback: types.CallbackQuery, state: FSMContext):
    await delete_preview_message(callback.message.chat.id)
    
    cancel_message = """
üõë <b>–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ</b> üõë

–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É <b>"üìù –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É"</b>

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help
"""
    await callback.message.answer(cancel_message)
    await state.clear()
    await callback.answer()

# ================== –ü–û–ò–°–ö –ò –ü–†–û–°–ú–û–¢–† –ê–ù–ö–ï–¢ ==================

@dp.message(F.text == "üîç –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
async def handle_search(message: types.Message):
    await show_random_listing(message)

async def show_random_listing(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∫—Ä–æ–º–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö
    all_listings = storage.get_active_listings(message.from_user.id)
    
    if not all_listings:
        await message.answer("üîç –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_history = storage.get_user_history(message.from_user.id)
    
    # –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    available_listings = [
        listing for listing in all_listings
        if listing.id not in user_history.viewed_ids
    ]
    
    if not available_listings:
        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        storage.reset_viewed(message.from_user.id)
        available_listings = all_listings
        await message.answer("üîÑ –í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.")
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    listing = random.choice(available_listings)
    
    # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ
    storage.mark_as_viewed(message.from_user.id, listing.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
    is_favorite = listing.id in storage.get_user_history(message.from_user.id).favorites
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    response = (
        f"üõç <b>{listing.title}</b>\n\n"
        f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{listing.description}\n\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {listing.price} —Ä—É–±.\n"
        f"üë§ <b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> @{listing.user_id}\n\n"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    
    if not is_favorite:
        builder.add(types.InlineKeyboardButton(
            text="‚ù§Ô∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
            callback_data=f"fav_{listing.id}"
        ))
    else:
        builder.add(types.InlineKeyboardButton(
            text="üíî –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
            callback_data=f"unfav_{listing.id}"
        ))
    
    builder.add(types.InlineKeyboardButton(
        text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
        callback_data="next_listing"
    ))
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
    if listing.photos:
        media = []
        for i, photo_id in enumerate(listing.photos):
            media.append(types.InputMediaPhoto(
                media=photo_id,
                caption=response if i == 0 else None
            ))
        
        await message.answer_media_group(media=media)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=builder.as_markup())
    else:
        await message.answer(response, reply_markup=builder.as_markup())

@dp.callback_query(F.data == "next_listing")
async def next_listing(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except:
        pass
    await show_random_listing(callback.message)

@dp.callback_query(F.data.startswith("fav_"))
async def add_favorite(callback: types.CallbackQuery):
    listing_id = callback.data.split('_')[1]
    
    try:
        storage.add_to_favorites(callback.from_user.id, listing_id)
        await callback.answer("‚ù§Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        builder = InlineKeyboardBuilder()
        builder.add(
            types.InlineKeyboardButton(
                text="üíî –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
                callback_data=f"unfav_{listing_id}"
            ),
            types.InlineKeyboardButton(
                text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
                callback_data="next_listing"
            )
        )
        
        try:
            await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
        except:
            pass
    except Exception as e:
        await callback.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

@dp.callback_query(F.data.startswith("unfav_"))
async def remove_favorite(callback: types.CallbackQuery):
    listing_id = callback.data.split('_')[1]
    
    try:
        storage.remove_from_favorites(callback.from_user.id, listing_id)
        await callback.answer("üíî –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        builder = InlineKeyboardBuilder()
        builder.add(
            types.InlineKeyboardButton(
                text="‚ù§Ô∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                callback_data=f"fav_{listing_id}"
            ),
            types.InlineKeyboardButton(
                text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
                callback_data="next_listing"
            )
        )
        
        try:
            await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
        except:
            pass
    except Exception as e:
        await callback.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

# ================== –ú–û–ò –ê–ù–ö–ï–¢–´ ==================

@dp.message(F.text == "üíº –ú–æ–∏ –∞–Ω–∫–µ—Ç—ã")
async def handle_my(message: types.Message):
    user_listings = storage.get_user_listings(message.from_user.id)
    
    if not user_listings:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–∫–µ—Ç.")
        return
    
    response = ["üìÇ <b>–í–∞—à–∏ –∞–Ω–∫–µ—Ç—ã</b>\n"]
    for listing in user_listings:
        response.append(
            f"\nüÜî <b>ID:</b> {listing.id}\n"
            f"üè∑ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {listing.title}\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> {listing.price} —Ä—É–±.\n"
            f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {listing.description[:100]}...\n"
        )
    
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="delete_listing")
    )
    
    await message.answer("\n".join(response), reply_markup=builder.as_markup())

@dp.callback_query(F.data == "delete_listing")
async def delete_listing_prompt(callback: types.CallbackQuery):
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –∞–Ω–∫–µ—Ç—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")

@dp.message(F.text.regexp(r'^\d+$'))
async def delete_listing_by_id(message: types.Message):
    listing_id = message.text
    
    if storage.deactivate_listing(listing_id, message.from_user.id):
        await message.answer("üóë –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
    else:
        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

# ================== –ò–ó–ë–†–ê–ù–ù–´–ï –ê–ù–ö–ï–¢–´ ==================

@dp.message(F.text == "‚ô•Ô∏è –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã")
async def handle_likes(message: types.Message):
    favorites = storage.get_favorites(message.from_user.id)
    
    if not favorites:
        await message.answer("‚ù§Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        return
    
    for listing in favorites:
        response = (
            f"‚ù§Ô∏è <b>–ò–∑–±—Ä–∞–Ω–Ω–æ–µ</b>\n\n"
            f"üè∑ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {listing.title}\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> {listing.price} —Ä—É–±.\n"
            f"üë§ <b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> @{listing.user_id}\n"
            f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{listing.description}\n\n"
        )
        
        builder = InlineKeyboardBuilder()
        builder.add(
            types.InlineKeyboardButton(
                text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É",
                url=f"tg://user?id={listing.user_id}"
            ),
            types.InlineKeyboardButton(
                text="üíî –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
                callback_data=f"unfav_{listing.id}"
            )
        )
        
        if listing.photos:
            media = []
            for i, photo_id in enumerate(listing.photos):
                media.append(types.InputMediaPhoto(
                    media=photo_id,
                    caption=response if i == 0 else None
                ))
            
            await message.answer_media_group(media=media)
            await message.answer("–î–µ–π—Å—Ç–≤–∏—è —Å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º:", reply_markup=builder.as_markup())
        else:
            await message.answer(response, reply_markup=builder.as_markup())

# ================== –ó–ê–ì–õ–£–®–ö–ò ==================

@dp.message(F.text == "üïë –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫")
async def handle_history(message: types.Message):
    await message.answer("üõí <b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫</b>\n\n–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–∞—à–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏.")

# ================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==================

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())