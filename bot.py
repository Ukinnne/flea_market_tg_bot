import asyncio
import logging
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandStart
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from datetime import datetime
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .env")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    with sqlite3.connect('marketplace.db') as conn:
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS listings
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      user_id INTEGER,
                      title TEXT,
                      description TEXT,
                      price REAL,
                      category TEXT,
                      status TEXT,
                      created_at TIMESTAMP,
                      rating INTEGER DEFAULT 0)''')
        c.execute('''CREATE TABLE IF NOT EXISTS users
                     (user_id INTEGER PRIMARY KEY,
                      username TEXT,
                      reputation INTEGER DEFAULT 0,
                      is_admin BOOLEAN DEFAULT 0)''')
        c.execute('''CREATE TABLE IF NOT EXISTS messages
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      listing_id INTEGER,
                      sender_id INTEGER,
                      receiver_id INTEGER,
                      message TEXT,
                      sent_at TIMESTAMP)''')
        conn.commit()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ListingForm(StatesGroup):
    title = State()
    description = State()
    price = State()
    category = State()

class SearchForm(StatesGroup):
    query = State()
    category = State()

class MessageForm(StatesGroup):
    message = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu(is_admin=False):
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"))
    builder.add(KeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä"))
    builder.add(KeyboardButton(text="üì¶ –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"))
    builder.add(KeyboardButton(text="‚≠ê –ú–æ—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è"))
    builder.add(KeyboardButton(text="üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å") if is_admin else KeyboardButton(text="üìö –ü–æ–º–æ—â—å"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
async def is_admin_user(user_id):
    with sqlite3.connect('marketplace.db') as conn:
        c = conn.cursor()
        c.execute("SELECT is_admin FROM users WHERE user_id = ?", (user_id,))
        result = c.fetchone()
        return result and result[0]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def start_command(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    with sqlite3.connect('marketplace.db') as conn:
        c = conn.cursor()
        c.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)", (user_id, username))
        conn.commit()
    is_admin = await is_admin_user(user_id)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Marketplace Bot! üõí\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu(is_admin))

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@dp.message(lambda message: message.text == "üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def create_listing(message: types.Message, state: FSMContext):
    await state.set_state(ListingForm.title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:", reply_markup=types.ReplyKeyboardRemove())

@dp.message(ListingForm.title)
async def process_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(ListingForm.description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@dp.message(ListingForm.description)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(ListingForm.price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (–≤ —Ä—É–±–ª—è—Ö):")

@dp.message(ListingForm.price)
async def process_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text)
        if price <= 0:
            raise ValueError
        await state.update_data(price=price)
        await state.set_state(ListingForm.category)
        categories = ["–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "–û–¥–µ–∂–¥–∞", "–î–æ–º", "–ê–≤—Ç–æ", "–î—Ä—É–≥–æ–µ"]
        builder = ReplyKeyboardBuilder()
        for cat in categories:
            builder.add(KeyboardButton(text=cat))
        builder.adjust(2)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=builder.as_markup(resize_keyboard=True))
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0):")

@dp.message(ListingForm.category)
async def process_category(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.from_user.id
    with sqlite3.connect('marketplace.db') as conn:
        c = conn.cursor()
        c.execute("INSERT INTO listings (user_id, title, description, price, category, status, created_at) VALUES (?, ?, ?, ?, ?, ?, ?)",
                  (user_id, data['title'], data['description'], data['price'], message.text, 'active', datetime.now()))
        conn.commit()
    is_admin = await is_admin_user(user_id)
    await state.clear()
    await message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ! üéâ", reply_markup=get_main_menu(is_admin))

# –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
@dp.message(lambda message: message.text == "üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä")
async def search_listing(message: types.Message, state: FSMContext):
    await state.set_state(SearchForm.query)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π):",
                         reply_markup=types.ReplyKeyboardRemove())

@dp.message(SearchForm.query)
async def process_search_query(message: types.Message, state: FSMContext):
    await state.update_data(query=message.text)
    await state.set_state(SearchForm.category)
    categories = ["–í—Å–µ", "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "–û–¥–µ–∂–¥–∞", "–î–æ–º", "–ê–≤—Ç–æ", "–î—Ä—É–≥–æ–µ"]
    builder = ReplyKeyboardBuilder()
    for cat in categories:
        builder.add(KeyboardButton(text=cat))
    builder.adjust(2)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=builder.as_markup(resize_keyboard=True))

@dp.message(SearchForm.category)
async def process_search_category(message: types.Message, state: FSMContext):
    data = await state.get_data()
    query = f"%{data['query']}%"
    category = message.text if message.text != "–í—Å–µ" else "%"
    with sqlite3.connect('marketplace.db') as conn:
        c = conn.cursor()
        c.execute("SELECT id, title, price, category, user_id FROM listings WHERE title LIKE ? AND category LIKE ? AND status = 'active'",
                  (query, category))
        listings = c.fetchall()
    
    if not listings:
        is_admin = await is_admin_user(message.from_user.id)
        await message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. üòî –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.", reply_markup=get_main_menu(is_admin))
        await state.clear()
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for listing in listings:
        listing_id, title, price, category, user_id = listing
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text=f"{title} ({price}‚ÇΩ)", callback_data=f"view_{listing_id}")
        ])
    await message.answer("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:", reply_markup=keyboard)
    await state.clear()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@dp.callback_query(lambda c: c.data.startswith('view_'))
async def view_listing(callback: types.CallbackQuery):
    listing_id = int(callback.data.split('_')[1])
    with sqlite3.connect('marketplace.db') as conn:
        c = conn.cursor()
        c.execute("SELECT title, description, price, category, user_id, status FROM listings WHERE id = ?", (listing_id,))
        listing = c.fetchone()
        if not listing:
            await callback.message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        title, description, price, category, user_id, status = listing
        c.execute("SELECT username FROM users WHERE user_id = ?", (user_id,))
        username = c.fetchone()[0]
    
    text = f"üì¶ {title}\nüí∞ –¶–µ–Ω–∞: {price}‚ÇΩ\nüìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\nüë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{username}"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    if status == 'active' and callback.from_user.id != user_id:
        keyboard.inline_keyboard.append([InlineKeyboardButton(text="üì© –ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É", callback_data=f"msg_{listing_id}")])
    if callback.from_user.id == user_id and status == 'active':
        keyboard.inline_keyboard.append([InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data=f"close_{listing_id}")])
    
    await callback.message.answer(text, reply_markup=keyboard)
    await callback.answer()

# –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@dp.callback_query(lambda c: c.data.startswith('close_'))
async def close_listing(callback: types.CallbackQuery):
    listing_id = int(callback.data.split('_')[1])
    with sqlite3.connect('marketplace.db') as conn:
        c = conn.cursor()
        c.execute("SELECT user_id FROM listings WHERE id = ?", (listing_id,))
        user_id = c.fetchone()[0]
        if callback.from_user.id != user_id:
            await callback.answer("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –∑–∞–∫—Ä—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!", show_alert=True)
            return
        c.execute("UPDATE listings SET status = 'closed' WHERE id = ?", (listing_id,))
        conn.commit()
    is_admin = await is_admin_user(callback.from_user.id)
    await callback.message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ. ‚úÖ", reply_markup=get_main_menu(is_admin))
    await callback.answer()

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü—É
@dp.callback_query(lambda c: c.data.startswith('msg_'))
async def message_seller(callback: types.CallbackQuery, state: FSMContext):
    listing_id = int(callback.data.split('_')[1])
    await state.update_data(listing_id=listing_id)
    await state.set_state(MessageForm.message)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É:")
    await callback.answer()

@dp.message(MessageForm.message)
async def process_seller_message(message: types.Message, state: FSMContext):
    data = await state.get_data()
    listing_id = data['listing_id']
    sender_id = message.from_user.id
    with sqlite3.connect('marketplace.db') as conn:
        c = conn.cursor()
        c.execute("SELECT user_id FROM listings WHERE id = ?", (listing_id,))
        receiver_id = c.fetchone()[0]
        c.execute("INSERT INTO messages (listing_id, sender_id, receiver_id, message, sent_at) VALUES (?, ?, ?, ?, ?)",
                  (listing_id, sender_id, receiver_id, message.text, datetime.now()))
        conn.commit()
    is_admin = await is_admin_user(sender_id)
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü—É! üì©", reply_markup=get_main_menu(is_admin))
    await state.clear()

# –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@dp.message(lambda message: message.text == "üì¶ –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
async def my_listings(message: types.Message):
    user_id = message.from_user.id
    with sqlite3.connect('marketplace.db') as conn:
        c = conn.cursor()
        c.execute("SELECT id, title, price, status FROM listings WHERE user_id = ?", (user_id,))
        listings = c.fetchall()
    
    if not listings:
        is_admin = await is_admin_user(user_id)
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π. üòî –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ!", reply_markup=get_main_menu(is_admin))
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for listing in listings:
        listing_id, title, price, status = listing
        status_emoji = "‚úÖ" if status == 'active' else "‚ùå"
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text=f"{status_emoji} {title} ({price}‚ÇΩ)", callback_data=f"view_{listing_id}")
        ])
    await message.answer("–í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:", reply_markup=keyboard)

# –†–µ–ø—É—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(lambda message: message.text == "‚≠ê –ú–æ—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è")
async def my_reputation(message: types.Message):
    user_id = message.from_user.id
    with sqlite3.connect('marketplace.db') as conn:
        c = conn.cursor()
        c.execute("SELECT reputation, username FROM users WHERE user_id = ?", (user_id,))
        user = c.fetchone()
        reputation, username = user
    is_admin = await is_admin_user(user_id)
    await message.answer(f"üë§ @{username}\n‚≠ê –†–µ–ø—É—Ç–∞—Ü–∏—è: {reputation}", reply_markup=get_main_menu(is_admin))

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@dp.message(lambda message: message.text == "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message):
    user_id = message.from_user.id
    if not await is_admin_user(user_id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", reply_markup=get_main_menu())
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üö´ –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_ban")]
    ])
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=keyboard)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.callback_query(lambda c: c.data == "admin_stats")
async def admin_stats(callback: types.CallbackQuery):
    if not await is_admin_user(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    with sqlite3.connect('marketplace.db') as conn:
        c = conn.cursor()
        c.execute("SELECT COUNT(*) FROM listings WHERE status = 'active'")
        active_listings = c.fetchone()[0]
        c.execute("SELECT COUNT(*) FROM users")
        total_users = c.fetchone()[0]
    is_admin = await is_admin_user(callback.from_user.id)
    await callback.message.answer(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {active_listings}\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}",
                                 reply_markup=get_main_menu(is_admin))
    await callback.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    init_db()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())