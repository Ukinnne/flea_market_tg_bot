from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
import os
import asyncio
import re

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# Initialize storage
storage = MemoryStorage()

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

dp = Dispatcher(storage=storage)

# Define states for FSM
class CreateForm(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_photos = State()
    waiting_for_price = State()
    confirmation = State()

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º
preview_message_id = None

def is_next_command(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π '–¥–∞–ª—å—à–µ' –≤ –ª—é–±–æ–º –Ω–∞–ø–∏—Å–∞–Ω–∏–∏"""
    return re.fullmatch(r'–¥–∞–ª—å—à–µ|–¥–ø–ª—å—à–µ|–¥–∞–ª—à–µ|–¥–∞–ª–µ–µ|—Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', text.lower()) is not None

@dp.message(Command("start"))
async def start(message: types.Message):
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"),
        types.KeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É"),
    )
    builder.row(
        types.KeyboardButton(text="üíº –ú–æ–∏ –∞–Ω–∫–µ—Ç—ã"),
        types.KeyboardButton(text="üïë –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫"),
    )
    builder.row(
        types.KeyboardButton(text="‚ô•Ô∏è –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã")
    )

    welcome_message = """
<b>üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FleaMarketBot!</b> üõçÔ∏èüí∞

–≠—Ç–æ —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è <b>–±—ã—Å—Ç—Ä—ã—Ö</b> –∏ <b>–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö</b> –ø–æ–∫—É–ø–æ–∫ –∏ –ø—Ä–æ–¥–∞–∂ –ø—Ä—è–º–æ –≤ Telegram!

‚ú® <b>–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?</b> ‚ú®
‚Ä¢ <b>–ü—Ä–æ–¥–∞–≤–∞—Ç—å –≤–µ—â–∏</b> ‚Äî –ª–µ–≥–∫–æ –∏ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏!
‚Ä¢ <b>–ù–∞—Ö–æ–¥–∏—Ç—å –≤—ã–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b> ‚Äî –≤—Å—ë –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ!
‚Ä¢ <b>–°–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ</b> ‚Äî —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–µ—Å—è!

üöÄ <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å?</b>
–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ –∏ —Å–ª–µ–¥—É–π –ø–æ–¥—Å–∫–∞–∑–∫–∞–º!

<b>–£–¥–∞—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫!</b> üí´
"""
    await message.answer(welcome_message, reply_markup=builder.as_markup(resize_keyboard=True))

@dp.message(F.text == "üîç –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
async def handle_search(message: types.Message):
    await message.answer("üîé <b>–î–∞–≤–∞–π—Ç–µ –Ω–∞–π–¥–µ–º —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!</b>\n\n–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@dp.message(F.text == "üìù –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É")
async def handle_create(message: types.Message, state: FSMContext):
    await state.set_state(CreateForm.waiting_for_title)
    await message.answer("üõçÔ∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞–Ω–∫–µ—Ç—ã</b>\n\nüìõ <b>–®–∞–≥ 1 –∏–∑ 4</b>\n\n–ü—Ä–∏–¥—É–º–∞–π—Ç–µ <b>—è—Ä–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</b> –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:\n\n<code>–ü—Ä–∏–º–µ—Ä: \"–ö—Ä—É—Ç–æ–π –≤–µ–ª–æ—Å–∏–ø–µ–¥ GT Aggressor\"</code>")

@dp.message(CreateForm.waiting_for_title)
async def process_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(CreateForm.waiting_for_description)
    await message.answer("üìù <b>–®–∞–≥ 2 –∏–∑ 4</b>\n\n–ù–∞–ø–∏—à–∏—Ç–µ <b>–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b> –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:\n\n<code>–ü—Ä–∏–º–µ—Ä: \"–í–µ–ª–æ—Å–∏–ø–µ–¥ –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, 2021 –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞. –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∏–¥–µ–∞–ª—å–Ω–æ, –ø—Ä–æ–±–µ–≥ –º–µ–Ω–µ–µ 500 –∫–º.\"</code>")

@dp.message(CreateForm.waiting_for_description)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(CreateForm.waiting_for_photos)
    await message.answer("üì∏ <b>–®–∞–≥ 3 –∏–∑ 4</b>\n\n–ü—Ä–∏—à–ª–∏—Ç–µ <b>–¥–æ 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</b> –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ (—á–µ–º –±–æ–ª—å—à–µ, —Ç–µ–º –ª—É—á—à–µ!):\n\n–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <b>\"–î–∞–ª—å—à–µ\"</b> (–º–æ–∂–Ω–æ –≤ –ª—é–±–æ–º –Ω–∞–ø–∏—Å–∞–Ω–∏–∏), –µ—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ—Ç")

@dp.message(CreateForm.waiting_for_photos, F.text)
async def handle_text_during_photos(message: types.Message, state: FSMContext):
    if is_next_command(message.text):
        await state.set_state(CreateForm.waiting_for_price)
        await message.answer("üí∞ <b>–§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥!</b>\n\n–£–∫–∞–∂–∏—Ç–µ <b>—Ü–µ–Ω—É</b> –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):\n\n<code>–ü—Ä–∏–º–µ—Ä: 15000</code>")
    else:
        await message.answer("üì∏ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ —ç—Ç–∞–ø–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 3 —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <b>\"–î–∞–ª—å—à–µ\"</b> (–º–æ–∂–Ω–æ –≤ –ª—é–±–æ–º –Ω–∞–ø–∏—Å–∞–Ω–∏–∏), —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.")

@dp.message(CreateForm.waiting_for_photos, F.photo)
async def process_photos(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get('photos', [])
    
    if len(photos) < 3:
        photos.append(message.photo[-1].file_id)
        await state.update_data(photos=photos)
        
        if len(photos) < 3:
            await message.answer(f"üì∏ –§–æ—Ç–æ {len(photos)}/3 –ø–æ–ª—É—á–µ–Ω–æ!\n\n–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å <b>\"–î–∞–ª—å—à–µ\"</b> (–º–æ–∂–Ω–æ –≤ –ª—é–±–æ–º –Ω–∞–ø–∏—Å–∞–Ω–∏–∏)")
        else:
            await state.set_state(CreateForm.waiting_for_price)
            await message.answer("‚úÖ <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!</b>\n\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ <b>—Ü–µ–Ω—É</b> –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
    else:
        await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ (3). –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É–∫–∞–∑–∞–Ω–∏—é —Ü–µ–Ω—ã.")

@dp.message(CreateForm.waiting_for_price, F.text.regexp(r'^\d+$'))
async def process_price_valid(message: types.Message, state: FSMContext):
    await state.update_data(price=int(message.text))
    await state.set_state(CreateForm.confirmation)
    await show_preview(message, state)

@dp.message(CreateForm.waiting_for_price)
async def process_price_invalid(message: types.Message):
    await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏ (–±–µ–∑ –±—É–∫–≤, –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤).\n\n–ü—Ä–∏–º–µ—Ä: <code>15000</code>")

async def show_preview(message: types.Message, state: FSMContext):
    global preview_message_id
    data = await state.get_data()
    
    preview_text = (
        "üõí <b>–ü–†–ï–î–ü–†–û–°–ú–û–¢–† –ê–ù–ö–ï–¢–´</b> üõí\n\n"
        f"üè∑ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['title']}\n"
        f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n"
        f"üíµ <b>–¶–µ–Ω–∞:</b> {data['price']} —Ä—É–±.\n\n"
        "‚ú® <b>–í—Å—ë –≤—ã–≥–ª—è–¥–∏—Ç –æ—Ç–ª–∏—á–Ω–æ?</b> ‚ú®"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="‚úÖ –î–∞, –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å!", callback_data="confirm_yes"),
        types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no")
    )
    
    if data.get('photos'):
        media = []
        for i, photo_id in enumerate(data['photos']):
            media.append(types.InputMediaPhoto(
                media=photo_id,
                caption=preview_text if i == 0 else None
            ))
        
        await message.answer_media_group(media=media)
        msg = await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã:", reply_markup=builder.as_markup())
        preview_message_id = msg.message_id
    else:
        msg = await message.answer(preview_text, reply_markup=builder.as_markup())
        preview_message_id = msg.message_id

async def delete_preview_message(chat_id: int):
    global preview_message_id
    if preview_message_id:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=preview_message_id)
        except:
            pass
        preview_message_id = None

@dp.callback_query(CreateForm.confirmation, F.data == "confirm_yes")
async def confirm_yes(callback: types.CallbackQuery, state: FSMContext):
    await delete_preview_message(callback.message.chat.id)
    
    success_message = """
üéâ <b>–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b> üéâ

–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–ø–µ—Ä—å –≤–∏–¥–Ω–æ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. 

<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>
‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∞–Ω–∫–µ—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ <b>"üíº –ú–æ–∏ –∞–Ω–∫–µ—Ç—ã"</b>
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É —Ç–∞–º –∂–µ

–ñ–µ–ª–∞–µ–º –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–¥–∞–∂–∏! üí∞
"""
    await callback.message.answer(success_message)
    await state.clear()
    await callback.answer()

@dp.callback_query(CreateForm.confirmation, F.data == "confirm_no")
async def confirm_no(callback: types.CallbackQuery, state: FSMContext):
    await delete_preview_message(callback.message.chat.id)
    
    cancel_message = """
üõë <b>–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ</b> üõë

–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É <b>"üìù –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É"</b>

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help
"""
    await callback.message.answer(cancel_message)
    await state.clear()
    await callback.answer()

@dp.message(F.text == "üíº –ú–æ–∏ –∞–Ω–∫–µ—Ç—ã")
async def handle_my(message: types.Message):
    await message.answer("üìÇ <b>–í–∞—à–∏ –∞–Ω–∫–µ—Ç—ã</b>\n\n–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤–∞–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")

@dp.message(F.text == "üïë –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫")
async def handle_history(message: types.Message):
    await message.answer("üõí <b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫</b>\n\n–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–∞—à–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏.")

@dp.message(F.text == "‚ô•Ô∏è –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã")
async def handle_likes(message: types.Message):
    await message.answer("‚ù§Ô∏è <b>–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã</b>\n\n–ó–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤—Å–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –≤–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")

@dp.message(Command("help"))
async def help_command(message: types.Message):
    help_text = """
üÜò <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b> üÜò

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É

<b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É?</b>
1. –ù–∞–∂–º–∏—Ç–µ "üìù –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É"
2. –°–ª–µ–¥—É–π—Ç–µ –ø–æ—à–∞–≥–æ–≤—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ

<b>–ö–∞–∫ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä?</b>
1. –ù–∞–π–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ "üîç –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"
2. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º
3. –î–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ–± —É—Å–ª–æ–≤–∏—è—Ö —Å–¥–µ–ª–∫–∏

<b>–í–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @Ukinnne
"""
    await message.answer(help_text)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())